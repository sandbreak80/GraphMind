name: EminiPlayer QA Automation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  qa-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests
        pip install pytest pytest-cov
    
    - name: Start services
      run: |
        # This would start the actual services in a real environment
        # For now, we'll assume they're already running
        echo "Services should be running at http://localhost:3001"
    
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
    
    - name: Run comprehensive tests
      run: |
        python3 tests/integration/test_comprehensive_suite_v2.py \
          --url http://localhost:3001 \
          --output comprehensive_results.json \
          --verbose
      continue-on-error: true
    
    - name: Run performance tests
      run: |
        python3 tests/performance/test_performance_suite.py \
          --url http://localhost:3001 \
          --output performance_results.json \
          --concurrent 3
      continue-on-error: true
    
    - name: Run quick validation
      run: |
        python3 tests/integration/test_quick_validation.py
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          comprehensive_results.json
          performance_results.json
        retention-days: 30
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## QA Test Results\n\n';
          
          try {
            if (fs.existsSync('comprehensive_results.json')) {
              const comprehensive = JSON.parse(fs.readFileSync('comprehensive_results.json', 'utf8'));
              comment += `### Comprehensive Tests\n`;
              comment += `- **Total Tests:** ${comprehensive.total_tests}\n`;
              comment += `- **Passed:** ${comprehensive.passed}\n`;
              comment += `- **Failed:** ${comprehensive.failed}\n`;
              comment += `- **Errors:** ${comprehensive.errors}\n`;
              comment += `- **Total Time:** ${comprehensive.total_time.toFixed(2)}s\n\n`;
            }
          } catch (e) {
            comment += '### Comprehensive Tests\n- ❌ Failed to load results\n\n';
          }
          
          try {
            if (fs.existsSync('performance_results.json')) {
              const performance = JSON.parse(fs.readFileSync('performance_results.json', 'utf8'));
              comment += `### Performance Tests\n`;
              comment += `- **Total Tests:** ${performance.total_tests}\n`;
              comment += `- **Passed:** ${performance.passed}\n`;
              comment += `- **Failed:** ${performance.failed}\n`;
              comment += `- **Success Rate:** ${performance.success_rate.toFixed(1)}%\n\n`;
            }
          } catch (e) {
            comment += '### Performance Tests\n- ❌ Failed to load results\n\n';
          }
          
          comment += '---\n*This comment was automatically generated by the QA automation workflow.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });